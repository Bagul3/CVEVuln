using System.Collections.Generic;
using CVEVuln.Models;
using CVEVuln.Models.Resources.CVE;

namespace CVEVulnDA
{
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;

    public class VulnerabilityRepository : GenericRepository<CVE_VulnEntities, Vulnerabilities>
    {
        public async Task InsertVulnerabilities(List<Vulnerabilities> vulnerabilitieses)
        {
            vulnerabilitieses.ForEach(this.UpdateIfRecordDoesNotExist);
            if (this.HasUnsavedChanges())
            {
                await this.Save();
            }
        }

        public async Task<Vulnerabilities> GetVulnerability(int id)
        {
            return await this.FindBy(x => x.Id == id).FirstAsync();
        }
        
        public async Task<List<VulnerabilitiesResource>> GetVulnerabilitiesByServiceName(string service)
        {
            var vulnerabilitieses = await this.FindBy(x => x.service == service).OrderByDescending(x => x.cvss_score).ToListAsync();
            return new AutoMapperBase().Mapper.Map<List<VulnerabilitiesResource>>(vulnerabilitieses);
        }

        private void UpdateIfRecordDoesNotExist(Vulnerabilities vulnerability)
        {
            if (this.FindBy(x => x.cve_id == vulnerability.cve_id).FirstOrDefault() != null)
            {
                return;
            }

            this.Add(vulnerability);
        }

        private bool HasUnsavedChanges()
        {
            return this.Context.ChangeTracker.Entries().Any(e => e.State == EntityState.Added
                                                         || e.State == EntityState.Modified
                                                         || e.State == EntityState.Deleted);
        }
    }
}
